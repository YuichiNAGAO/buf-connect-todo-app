// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/task/v1/task.proto

package taskv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/YuichiNAGAO/buf-connect-todo-app/backend/gen/proto/task/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// TaskServiceName is the fully-qualified name of the TaskService service.
	TaskServiceName = "proto.task.v1.TaskService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// TaskServiceGetTaskListProcedure is the fully-qualified name of the TaskService's GetTaskList RPC.
	TaskServiceGetTaskListProcedure = "/proto.task.v1.TaskService/GetTaskList"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	taskServiceServiceDescriptor           = v1.File_proto_task_v1_task_proto.Services().ByName("TaskService")
	taskServiceGetTaskListMethodDescriptor = taskServiceServiceDescriptor.Methods().ByName("GetTaskList")
)

// TaskServiceClient is a client for the proto.task.v1.TaskService service.
type TaskServiceClient interface {
	GetTaskList(context.Context, *connect.Request[v1.GetTaskListRequest]) (*connect.Response[v1.GetTaskListResponse], error)
}

// NewTaskServiceClient constructs a client for the proto.task.v1.TaskService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewTaskServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) TaskServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &taskServiceClient{
		getTaskList: connect.NewClient[v1.GetTaskListRequest, v1.GetTaskListResponse](
			httpClient,
			baseURL+TaskServiceGetTaskListProcedure,
			connect.WithSchema(taskServiceGetTaskListMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// taskServiceClient implements TaskServiceClient.
type taskServiceClient struct {
	getTaskList *connect.Client[v1.GetTaskListRequest, v1.GetTaskListResponse]
}

// GetTaskList calls proto.task.v1.TaskService.GetTaskList.
func (c *taskServiceClient) GetTaskList(ctx context.Context, req *connect.Request[v1.GetTaskListRequest]) (*connect.Response[v1.GetTaskListResponse], error) {
	return c.getTaskList.CallUnary(ctx, req)
}

// TaskServiceHandler is an implementation of the proto.task.v1.TaskService service.
type TaskServiceHandler interface {
	GetTaskList(context.Context, *connect.Request[v1.GetTaskListRequest]) (*connect.Response[v1.GetTaskListResponse], error)
}

// NewTaskServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewTaskServiceHandler(svc TaskServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	taskServiceGetTaskListHandler := connect.NewUnaryHandler(
		TaskServiceGetTaskListProcedure,
		svc.GetTaskList,
		connect.WithSchema(taskServiceGetTaskListMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/proto.task.v1.TaskService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case TaskServiceGetTaskListProcedure:
			taskServiceGetTaskListHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedTaskServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedTaskServiceHandler struct{}

func (UnimplementedTaskServiceHandler) GetTaskList(context.Context, *connect.Request[v1.GetTaskListRequest]) (*connect.Response[v1.GetTaskListResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.task.v1.TaskService.GetTaskList is not implemented"))
}
